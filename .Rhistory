install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
library(readr)
library(readr)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
library(readr)
library(rpart)
library(rpart.plot)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
creditsub <- read_csv("./credit.csv")
library(readr)
library(rpart)
library(rpart.plot)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
creditsub <- credit %>%
select(months_loan_duration, percent_of_income, years_at_residence, age, default)
library(readr)
library(rpart)
library(rpart.plot)
library(tidyverse)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
creditsub <- credit %>%
select(months_loan_duration, percent_of_income, years_at_residence, age, default)
library(readr)
library(rpart)
library(rpart.plot)
library(tidyverse)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
creditsub <- credit %>%
select(months_loan_duration, percent_of_income, years_at_residence, age, default)
library(readr)
library(rpart)
library(rpart.plot)
library(tidyverse)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
creditsub <- credit %>%
select(months_loan_duration, percent_of_income, years_at_residence, age, default)
str(creditsub)
credit_model <- rpart(formula = default ~ .,
data = creditsub,
method = "class")
rpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)
rpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)
# Total number of rows in the credit data frame
n <- nrow(credit)
# Number of rows for the training set (80% of the dataset)
n_train <- round(.8 * n)
# Create a vector of indices which is an 80% random sample
set.seed(123)
train_indices <- sample(1:n, n_train)
# Subset the credit data frame to training indices only
credit_train <- credit[train_indices, ]
# Exclude the training indices to create the test set
credit_test <- credit[-train_indices, ]
# Train the model (to predict 'default')
credit_model <- rpart(formula = default ~ .,
data = credit_train,
method = "class")
# Look at the model output
print(credit_model)
# Generate predicted classes using the model object
class_prediction <- predict(object = credit_model,
newdata = credit_test,
type = "class")
# Calculate the confusion matrix for the test set
confusionMatrix(data = class_prediction,
reference = credit_test$default)
# Calculate the confusion matrix for the test set
caret::confusionMatrix(data = class_prediction,
reference = credit_test$default)
# Train a gini-based model
credit_model1 <- rpart(formula = default ~ .,
data = credit_train,
method = "class",
parms = list(split = "gini"))
# Train an information-based model
credit_model2 <- rpart(formula = default ~ .,
data = credit_train,
method = "class",
parms = list(split = "information"))
# Generate predictions on the validation set using the gini model
pred1 <- predict(object = credit_model1,
newdata = credit_test,
type = "class")
# Generate predictions on the validation set using the information model
pred2 <- predict(object = credit_model2,
newdata = credit_test,
type = "class")
# Compare classification error
ce(actual = credit_test$default,
predicted = pred1)
library(caret)
# Compare classification error
ce(actual = credit_test$default,
predicted = pred1)
library(ipred)
library(ipred)
library(caret)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
library(readr)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(caret)
url <- "https://assets.datacamp.com/production/repositories/710/datasets/b649085c43111c83ba7ab6ec172d83cdc14a2942/credit.csv"
if(!file.exists("./credit.csv")){download.file(url, destfile = "./credit.csv")}
credit <- read_csv("./credit.csv")
creditsub <- credit %>%
select(months_loan_duration, percent_of_income, years_at_residence, age, default)
str(creditsub)
credit_model <- rpart(formula = default ~ .,
data = creditsub,
method = "class")
rpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)
rpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)
# Total number of rows in the credit data frame
n <- nrow(credit)
# Number of rows for the training set (80% of the dataset)
n_train <- round(.8 * n)
# Create a vector of indices which is an 80% random sample
set.seed(123)
train_indices <- sample(1:n, n_train)
# Subset the credit data frame to training indices only
credit_train <- credit[train_indices, ]
# Exclude the training indices to create the test set
credit_test <- credit[-train_indices, ]
# Train the model (to predict 'default')
credit_model <- rpart(formula = default ~ .,
data = credit_train,
method = "class")
# Look at the model output
print(credit_model)
# Generate predicted classes using the model object
class_prediction <- predict(object = credit_model,
newdata = credit_test,
type = "class")
# Calculate the confusion matrix for the test set
caret::confusionMatrix(data = class_prediction,
reference = credit_test$default)
